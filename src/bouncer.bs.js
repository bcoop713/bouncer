// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function doValidate(schema, value, path) {
  return Curry._2(schema[/* validator */0], value, path);
}

function validationToOutput(validation) {
  if (validation.tag) {
    return $$Array.of_list(validation[0]).map((function (c) {
                  return {
                          path: c[/* path */0],
                          target: c[/* value */1],
                          name: c[/* name */2]
                        };
                }));
  } else {
    return /* array */[];
  }
}

function concatValidations(v1, v2) {
  if (v1.tag) {
    if (v2.tag) {
      return /* Fail */Block.__(1, [List.concat(/* :: */[
                      v1[0],
                      /* :: */[
                        v2[0],
                        /* [] */0
                      ]
                    ])]);
    } else {
      return v1;
    }
  } else {
    return v2;
  }
}

function combineValidations(validations) {
  if (validations) {
    var vs = validations[1];
    var v = validations[0];
    if (vs) {
      if (vs[1]) {
        return concatValidations(v, combineValidations(vs));
      } else {
        return concatValidations(v, vs[0]);
      }
    } else {
      return v;
    }
  } else {
    return /* Success */Block.__(0, [/* record */[
                /* path */"",
                /* value */null,
                /* name */""
              ]]);
  }
}

function validate(schema, value) {
  return validationToOutput(Curry._2(schema[/* validator */0], value, ""));
}

function number_000(value, path) {
  var match = Js_json.decodeNumber(value);
  if (match !== undefined) {
    return /* Success */Block.__(0, [/* record */[
                /* path */path,
                /* value */value,
                /* name */"number"
              ]]);
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */"number"
                ],
                /* [] */0
              ]]);
  }
}

var number = /* record */[
  number_000,
  /* name */"number"
];

function string_000(value, path) {
  var match = Js_json.decodeString(value);
  if (match !== undefined) {
    return /* Success */Block.__(0, [/* record */[
                /* path */path,
                /* value */value,
                /* name */"string"
              ]]);
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */"string"
                ],
                /* [] */0
              ]]);
  }
}

var string = /* record */[
  string_000,
  /* name */"string"
];

function custom(validator, name) {
  return /* record */[
          /* validator */(function (value, path) {
              var match = Curry._1(validator, value);
              if (match) {
                return /* Success */Block.__(0, [/* record */[
                            /* path */path,
                            /* value */value,
                            /* name */name
                          ]]);
              } else {
                return /* Fail */Block.__(1, [/* :: */[
                            /* record */[
                              /* path */path,
                              /* value */value,
                              /* name */name
                            ],
                            /* [] */0
                          ]]);
              }
            }),
          /* name */name
        ];
}

function listValidator(schema, value, path) {
  var match = Js_json.decodeArray(value);
  if (match !== undefined) {
    return combineValidations($$Array.to_list(match.map((function (v, i) {
                          var path = String(i);
                          return Curry._2(schema[/* validator */0], v, path);
                        }))));
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */"list"
                ],
                /* [] */0
              ]]);
  }
}

function list(schema) {
  return /* record */[
          /* validator */(function (param, param$1) {
              return listValidator(schema, param, param$1);
            }),
          /* name */"list"
        ];
}

function recordValidator(schemaDict, value, path) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var record = Caml_option.valFromOption(match);
    var keys = Object.keys(schemaDict);
    return combineValidations($$Array.to_list($$Array.map((function (key) {
                          var match = Js_dict.get(record, key);
                          if (match !== undefined) {
                            var schema = schemaDict[key];
                            return Curry._2(schema[/* validator */0], Caml_option.valFromOption(match), key);
                          } else {
                            return /* Fail */Block.__(1, [/* :: */[
                                        /* record */[
                                          /* path */key,
                                          /* value */value,
                                          /* name */"key"
                                        ],
                                        /* [] */0
                                      ]]);
                          }
                        }), keys)));
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */"record"
                ],
                /* [] */0
              ]]);
  }
}

function record(schemaDict) {
  return /* record */[
          /* validator */(function (param, param$1) {
              return recordValidator(schemaDict, param, param$1);
            }),
          /* name */"record"
        ];
}

function tupleValidator(schemas, value, path) {
  var match = Js_json.decodeArray(value);
  if (match !== undefined) {
    var tuple = match;
    return combineValidations($$Array.to_list(schemas.map((function (schema, i) {
                          var exit = 0;
                          var v;
                          try {
                            v = Caml_array.caml_array_get(tuple, i);
                            exit = 1;
                          }
                          catch (raw_exn){
                            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                            if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                              return /* Fail */Block.__(1, [/* :: */[
                                          /* record */[
                                            /* path */String(i),
                                            /* value */value,
                                            /* name */"index"
                                          ],
                                          /* [] */0
                                        ]]);
                            } else {
                              throw exn;
                            }
                          }
                          if (exit === 1) {
                            var path = String(i);
                            return Curry._2(schema[/* validator */0], v, path);
                          }
                          
                        }))));
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */"tuple"
                ],
                /* [] */0
              ]]);
  }
}

function tuple(schemas) {
  return /* record */[
          /* validator */(function (param, param$1) {
              return tupleValidator(schemas, param, param$1);
            }),
          /* name */"tuple"
        ];
}

function not(schema) {
  return /* record */[
          /* validator */(function (value, path) {
              var match = Curry._2(schema[/* validator */0], value, path);
              if (match.tag) {
                return /* Success */Block.__(0, [/* record */[
                            /* path */path,
                            /* value */value,
                            /* name */"not " + schema[/* name */1]
                          ]]);
              } else {
                return /* Fail */Block.__(1, [/* :: */[
                            /* record */[
                              /* path */path,
                              /* value */value,
                              /* name */"not " + schema[/* name */1]
                            ],
                            /* [] */0
                          ]]);
              }
            }),
          /* name */"not " + schema[/* name */1]
        ];
}

function anyValidations(validations, value, path, name) {
  var fails = List.filter((function (v) {
            if (v.tag) {
              return false;
            } else {
              return true;
            }
          }))(validations);
  if (fails) {
    return /* Success */Block.__(0, [/* record */[
                /* path */path,
                /* value */value,
                /* name */name
              ]]);
  } else {
    return /* Fail */Block.__(1, [/* :: */[
                /* record */[
                  /* path */path,
                  /* value */value,
                  /* name */name
                ],
                /* [] */0
              ]]);
  }
}

function any(schemas) {
  var schemaNames = $$Array.map((function (s) {
            return s[/* name */1];
          }), schemas).reduce((function (a, b) {
          return a + (" " + b);
        }), "");
  var name = "any:" + schemaNames;
  return /* record */[
          /* validator */(function (value, path) {
              return anyValidations(List.map((function (s) {
                                return Curry._2(s[/* validator */0], value, path);
                              }), $$Array.to_list(schemas)), value, path, name);
            }),
          /* name */name
        ];
}

function all(schemas) {
  return /* record */[
          /* validator */(function (value, path) {
              return combineValidations(List.map((function (s) {
                                return Curry._2(s[/* validator */0], value, path);
                              }), $$Array.to_list(schemas)));
            }),
          /* name */"all"
        ];
}

function minStringLength(l) {
  var name = "minStringLength: " + String(l);
  var validator = function (value, path) {
    var match = Js_json.decodeString(value);
    if (match !== undefined) {
      var match$1 = match.length >= l;
      if (match$1) {
        return /* Success */Block.__(0, [/* record */[
                    /* path */path,
                    /* value */value,
                    /* name */name
                  ]]);
      } else {
        return /* Fail */Block.__(1, [/* :: */[
                    /* record */[
                      /* path */path,
                      /* value */value,
                      /* name */name
                    ],
                    /* [] */0
                  ]]);
      }
    } else {
      return /* Fail */Block.__(1, [/* :: */[
                  /* record */[
                    /* path */path,
                    /* value */value,
                    /* name */name
                  ],
                  /* [] */0
                ]]);
    }
  };
  return /* record */[
          /* validator */validator,
          /* name */name
        ];
}

function maxStringLength(l) {
  var name = "maxStringLength: " + String(l);
  var validator = function (value, path) {
    var match = Js_json.decodeString(value);
    if (match !== undefined) {
      var match$1 = match.length <= l;
      if (match$1) {
        return /* Success */Block.__(0, [/* record */[
                    /* path */path,
                    /* value */value,
                    /* name */name
                  ]]);
      } else {
        return /* Fail */Block.__(1, [/* :: */[
                    /* record */[
                      /* path */path,
                      /* value */value,
                      /* name */name
                    ],
                    /* [] */0
                  ]]);
      }
    } else {
      return /* Fail */Block.__(1, [/* :: */[
                  /* record */[
                    /* path */path,
                    /* value */value,
                    /* name */name
                  ],
                  /* [] */0
                ]]);
    }
  };
  return /* record */[
          /* validator */validator,
          /* name */name
        ];
}

export {
  doValidate ,
  validationToOutput ,
  concatValidations ,
  combineValidations ,
  validate ,
  number ,
  string ,
  custom ,
  listValidator ,
  list ,
  recordValidator ,
  record ,
  tupleValidator ,
  tuple ,
  not ,
  anyValidations ,
  any ,
  all ,
  minStringLength ,
  maxStringLength ,
  
}
/* No side effect */
